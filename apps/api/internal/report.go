package internal

import (
	"fmt"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/jung-kurt/gofpdf"
	"gorm.io/gorm"
)

// ReportPDF generates and serves a PDF report for an essay
func ReportPDF(db *gorm.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		publicId := c.Param("publicId")
		
		if db == nil {
			c.JSON(http.StatusServiceUnavailable, gin.H{"error": "database not available"})
			return
		}

		var essay Essay
		if err := db.First(&essay, "public_id = ?", publicId).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "report not found"})
			return
		}

		// Parse the bands JSON
		var scoreResult ScoreOut
		if err := FromJSON(essay.BandsJSON, &scoreResult); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "invalid report data"})
			return
		}

		// Generate share URL
		baseURL := os.Getenv("PUBLIC_BASE_URL")
		if baseURL == "" {
			baseURL = "http://localhost:3000"
		}
		shareURL := fmt.Sprintf("%s/r/%s", baseURL, essay.PublicID)

		// Create PDF
		pdf := gofpdf.New("P", "mm", "A4", "")
		pdf.AddPage()

		// Header
		pdf.SetFont("Arial", "B", 20)
		pdf.SetTextColor(58, 122, 254) // Brand color
		pdf.Cell(0, 15, "IELTS Writing Band Report")
		pdf.Ln(20)

		// Overall Score
		pdf.SetFont("Arial", "B", 16)
		pdf.SetTextColor(0, 0, 0)
		pdf.Cell(0, 10, "Overall Band Score")
		pdf.Ln(12)
		pdf.SetFont("Arial", "B", 36)
		pdf.SetTextColor(58, 122, 254)
		pdf.Cell(0, 20, formatBand(essay.Overall))
		pdf.Ln(15)

		// CEFR Level
		pdf.SetFont("Arial", "", 14)
		pdf.SetTextColor(100, 100, 100)
		pdf.Cell(0, 8, fmt.Sprintf("CEFR Level: %s", essay.CEFR))
		pdf.Ln(15)

		// Individual Bands
		pdf.SetFont("Arial", "B", 14)
		pdf.SetTextColor(0, 0, 0)
		pdf.Cell(0, 10, "Individual Band Scores")
		pdf.Ln(12)

		pdf.SetFont("Arial", "", 12)
		bands := []struct {
			name  string
			score float32
			desc  string
		}{
			{"Task Achievement", scoreResult.TA, "How well you answered the question"},
			{"Coherence & Cohesion", scoreResult.CC, "How well your ideas flow and connect"},
			{"Lexical Resource", scoreResult.LR, "Range and accuracy of vocabulary"},
			{"Grammar Range & Accuracy", scoreResult.GRA, "Variety and correctness of grammar"},
		}

		for _, band := range bands {
			pdf.SetFont("Arial", "B", 11)
			pdf.Cell(45, 8, band.name+":")
			pdf.SetFont("Arial", "B", 14)
			pdf.SetTextColor(58, 122, 254)
			pdf.Cell(15, 8, formatBand(band.score))
			pdf.SetFont("Arial", "", 10)
			pdf.SetTextColor(100, 100, 100)
			pdf.Cell(0, 8, band.desc)
			pdf.Ln(8)
			pdf.SetTextColor(0, 0, 0)
		}

		pdf.Ln(10)

		// Feedback
		pdf.SetFont("Arial", "B", 14)
		pdf.Cell(0, 10, "Detailed Feedback")
		pdf.Ln(12)
		pdf.SetFont("Arial", "", 11)
		pdf.MultiCell(0, 6, essay.Feedback, "", "", false)
		pdf.Ln(10)

		// Task Type
		pdf.SetFont("Arial", "", 10)
		pdf.SetTextColor(100, 100, 100)
		pdf.Cell(0, 6, fmt.Sprintf("Task Type: %s | Generated: %s", 
			essay.TaskType, essay.CreatedAt.Format("2006-01-02 15:04")))
		pdf.Ln(10)

		// QR Code (if we have space)
		if pdf.GetY() < 250 {
			pdf.SetFont("Arial", "B", 12)
			pdf.SetTextColor(0, 0, 0)
			pdf.Cell(0, 8, "Share this report:")
			pdf.Ln(10)
			
			// We'll add a simple text URL instead of embedding QR image for simplicity
			pdf.SetFont("Arial", "", 10)
			pdf.SetTextColor(58, 122, 254)
			pdf.Cell(0, 6, shareURL)
			pdf.Ln(8)
		}

		// Footer
		pdf.SetY(280)
		pdf.SetFont("Arial", "", 8)
		pdf.SetTextColor(150, 150, 150)
		pdf.Cell(0, 4, "Generated by IELTS Band Estimator - Improve your writing faster")

		// Set headers and output PDF
		c.Header("Content-Type", "application/pdf")
		c.Header("Content-Disposition", fmt.Sprintf("attachment; filename=ielts-report-%s.pdf", essay.PublicID))
		
		if err := pdf.Output(c.Writer); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "PDF generation failed"})
			return
		}
	}
}

// GetReport returns essay data for public sharing
func GetReport(db *gorm.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		publicId := c.Param("publicId")
		
		if db == nil {
			c.JSON(http.StatusServiceUnavailable, gin.H{"error": "database not available"})
			return
		}

		var essay Essay
		if err := db.First(&essay, "public_id = ?", publicId).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "report not found"})
			return
		}

		// Parse the bands JSON
		var scoreResult ScoreOut
		if err := FromJSON(essay.BandsJSON, &scoreResult); err != nil {
			// Return basic info if parsing fails
			c.JSON(http.StatusOK, gin.H{
				"publicId": essay.PublicID,
				"overall":  essay.Overall,
				"cefr":     essay.CEFR,
				"feedback": essay.Feedback,
				"taskType": essay.TaskType,
				"createdAt": essay.CreatedAt,
			})
			return
		}

		bands := map[string]float32{
			"ta":  scoreResult.TA,
			"cc":  scoreResult.CC,
			"lr":  scoreResult.LR,
			"gra": scoreResult.GRA,
		}

		c.JSON(http.StatusOK, gin.H{
			"publicId":  essay.PublicID,
			"overall":   essay.Overall,
			"bands":     bands,
			"cefr":      essay.CEFR,
			"feedback":  essay.Feedback,
			"taskType":  essay.TaskType,
			"createdAt": essay.CreatedAt,
		})
	}
}

func formatBand(f float32) string {
	if f == float32(int(f)) {
		return fmt.Sprintf("%.0f", f)
	}
	return fmt.Sprintf("%.1f", f)
}
