openapi: 3.0.3
info:
  title: IELTS Band Estimator API
  description: API for analyzing IELTS Writing essays and generating band scores
  version: 1.0.0
  contact:
    name: API Support
    email: support@ieltsestimator.com

servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://api.ieltsestimator.com/api
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  database:
                    type: boolean
                    example: true
                  redis:
                    type: boolean
                    example: true

  /auth/signup:
    post:
      summary: Create new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: password123
                name:
                  type: string
                  example: John Doe
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/profile:
    get:
      summary: Get user profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /essays/analyze:
    post:
      summary: Analyze IELTS essay
      tags:
        - Essays
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  minLength: 150
                  maxLength: 320
                  example: "Education is one of the most important aspects of human development..."
                taskType:
                  type: string
                  enum: [task1, task2]
                  example: task2
                prompt:
                  type: string
                  example: "Some people think that education should be free for everyone. Discuss both views and give your opinion."
      responses:
        '200':
          description: Essay analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EssayAnalysis'
        '400':
          description: Invalid essay content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /essays:
    get:
      summary: Get user's essay history
      tags:
        - Essays
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of user essays
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Essay'
                  total:
                    type: integer

  /reports/{publicId}/pdf:
    get:
      summary: Download PDF report
      tags:
        - Reports
      parameters:
        - name: publicId
          in: path
          required: true
          schema:
            type: string
            example: abc123def
      responses:
        '200':
          description: PDF report
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Report not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        plan:
          type: string
          enum: [free, pro]
          example: free
        createdAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/User'

    BandScores:
      type: object
      properties:
        ta:
          type: number
          format: float
          minimum: 0
          maximum: 9
          example: 7.0
        cc:
          type: number
          format: float
          minimum: 0
          maximum: 9
          example: 6.5
        lr:
          type: number
          format: float
          minimum: 0
          maximum: 9
          example: 7.5
        gra:
          type: number
          format: float
          minimum: 0
          maximum: 9
          example: 7.0

    EssayAnalysis:
      type: object
      properties:
        publicId:
          type: string
          example: abc123def
        overall:
          type: number
          format: float
          minimum: 0
          maximum: 9
          example: 7.0
        bands:
          $ref: '#/components/schemas/BandScores'
        cefr:
          type: string
          enum: [A1, A2, B1, B2, C1, C2]
          example: B2
        feedback:
          type: string
          example: "Your essay demonstrates good task achievement with clear position..."
        createdAt:
          type: string
          format: date-time

    Essay:
      type: object
      properties:
        id:
          type: integer
          example: 1
        taskType:
          type: string
          enum: [task1, task2]
          example: task2
        text:
          type: string
        overall:
          type: number
          format: float
          example: 7.0
        cefr:
          type: string
          example: B2
        publicId:
          type: string
          example: abc123def
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid input

    RateLimitError:
      type: object
      properties:
        error:
          type: string
          example: Rate limit exceeded. Please try again later.
        retry_after:
          type: integer
          example: 60
